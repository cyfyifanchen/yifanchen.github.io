<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
<link href="http://localhost:3000/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://localhost:3000/" rel="alternate" type="text/html" />
<updated>2016-05-23T20:04:04-06:00</updated>
<id>http://localhost:3000/</id>
<title>Yifan Chen</title>
<entry>
<title>The Future of Mac Gaming</title>
<link href="http://localhost:3000/the-future-of-mac-gaming/" rel="alternate" type="text/html" title="The Future of Mac Gaming" />
<published>2016-05-21T00:00:00-06:00</published>
<updated>2016-05-21T00:00:00-06:00</updated>
<id>http://localhost:3000/the-future-of-mac-gaming</id>
<content type="html" xml:base="http://localhost:3000/the-future-of-mac-gaming/">&lt;h3 id=&quot;mac-gaming-is-coming&quot;&gt;Mac gaming is coming&lt;/h3&gt;

&lt;p&gt;For years, Mac gaming has only been a concept to people. Metal, Apple’s graphic technology, was created to solve that problem. It successed on iOS, but not on OSX yet. it might not be long until the end of the year. We all know OpenGL is a horrible graphic API that is behind badly in technology. Metal was created by Apple to move away from OpenGL. Clearly, the intension of creating Metal is not only about having a another technology under the
company’s name, 
name.&lt;/p&gt;

&lt;p&gt;Metal, Apple’s graphic technology, has succeed on iOS, however not on OSX yet. As a gamer, I can’t wait Blizzard developers to make Metal working on all their games. For years, Mac gaming has only been a concept to people, it might not be long until the end of the year. We all know OpenGL is a horrible graphic API that is behind badly in technology. Metal was created by Apple to move away from OpenGL. Clearly, the intension of creating Metal is not only about having a another technology under the
company’s name, 
name.&lt;/p&gt;

&lt;p&gt;DirectX only works with Microsoft due to licence reason.&lt;/p&gt;

&lt;p&gt;Vulkan is a newer graphic API that has gained lots attention in the community, Google has adopted it for its virtual reality platform.&lt;/p&gt;

&lt;h3 id=&quot;what-are-the-graphic-apis-out-there&quot;&gt;What are the graphic APIs out there&lt;/h3&gt;

&lt;p&gt;DirectX
OpenGl
###&lt;/p&gt;

&lt;p&gt;Blizzard has officially &lt;a href=&quot;http://www.tentonhammer.com/articles/metal-coming-to-blizzard-games&quot; target=&quot;_blank&quot;&gt;commented&lt;/a&gt; that the support of Metal is coming. Even better, developers has already made Metal working internally on &lt;em&gt;World of Warcraft&lt;/em&gt;. It should be released to public by the end of the year. On top of this, &lt;em&gt;StarCraft 2&lt;/em&gt; and &lt;em&gt;Heros of storm&lt;/em&gt; are coming after that.&lt;/p&gt;

</content>
<category term="Mac Gaming" />
<category term="Technology" />
<category term="Metal" />
<summary>Mac gaming is coming</summary>
</entry>
<entry>
<title>The Future of Mac Gaming</title>
<link href="http://localhost:3000/the-future-of-mac-gaming/" rel="alternate" type="text/html" title="The Future of Mac Gaming" />
<published>2016-05-21T00:00:00-06:00</published>
<updated>2016-05-21T00:00:00-06:00</updated>
<id>http://localhost:3000/the-future-of-mac-gaming</id>
<content type="html" xml:base="http://localhost:3000/the-future-of-mac-gaming/">&lt;h3 id=&quot;mac-gaming-is-coming&quot;&gt;Mac gaming is coming&lt;/h3&gt;

&lt;p&gt;For a long time, Mac gaming has only been a concept to people. Metal, Apple’s graphic technology, was created to solve the problem. It was introduced at WWDC 2014 for iOS, then succeed on iOS, but not on OSX yet. it might not be long until the end of the year. We all know OpenGL is a horrible graphic API that is behind badly in technology. Metal was created by Apple to move away from OpenGL. Clearly, the intension of creating Metal is not only about having a another technology under the
company’s name, 
name.&lt;/p&gt;

&lt;p&gt;Metal, Apple’s graphic technology, has succeed on iOS, however not on OSX yet. As a gamer, I can’t wait Blizzard developers to make Metal working on all their games. For years, Mac gaming has only been a concept to people, it might not be long until the end of the year. We all know OpenGL is a horrible graphic API that is behind badly in technology. Metal was created by Apple to move away from OpenGL. Clearly, the intension of creating Metal is not only about having a another technology under the
company’s name, 
name.&lt;/p&gt;

&lt;p&gt;DirectX only works with Microsoft due to licence reason.&lt;/p&gt;

&lt;p&gt;Vulkan is a newer graphic API that has gained lots attention in the community, Google has adopted it for its virtual reality platform.&lt;/p&gt;

&lt;h3 id=&quot;what-are-the-graphic-apis-out-there&quot;&gt;What are the graphic APIs out there&lt;/h3&gt;

&lt;p&gt;DirectX
OpenGl
###&lt;/p&gt;

&lt;p&gt;Blizzard has officially &lt;a href=&quot;http://www.tentonhammer.com/articles/metal-coming-to-blizzard-games&quot; target=&quot;_blank&quot;&gt;commented&lt;/a&gt; that the support of Metal is coming. Even better, developers has already made Metal working internally on &lt;em&gt;World of Warcraft&lt;/em&gt;. It should be released to public by the end of the year. On top of this, &lt;em&gt;StarCraft 2&lt;/em&gt; and &lt;em&gt;Heros of storm&lt;/em&gt; are coming after that.&lt;/p&gt;

</content>
<category term="Mac Gaming" />
<category term="Technology" />
<category term="Metal" />
<summary>Mac gaming is coming</summary>
</entry>
<entry>
<title>Google I/O 2016</title>
<link href="http://localhost:3000/google-io-2016/" rel="alternate" type="text/html" title="Google I/O 2016" />
<published>2016-05-19T00:00:00-06:00</published>
<updated>2016-05-19T00:00:00-06:00</updated>
<id>http://localhost:3000/google-io-2016</id>
<content type="html" xml:base="http://localhost:3000/google-io-2016/">&lt;h3 id=&quot;google-io&quot;&gt;Google I/O&lt;/h3&gt;

&lt;p&gt;This year’s Google I/O was hosted outdoors at Shoreline Amitheater, Mountain View, California. The weather has been lovely for its annual technology and developer conference. Google indeed introduced lots new products and technologies.&lt;/p&gt;

&lt;h4 id=&quot;vr---virtual-reality&quot;&gt;VR - Virtual Reality&lt;/h4&gt;

&lt;p&gt;It’s called Daydream. It is Google’s virtual reality platform. It comes with Android N. And man; it sounds exciting, VR on mobile, it is breathtaking.&lt;/p&gt;

&lt;p&gt;Undoubtedly, VR is the biggest thing today. As a tech company, if you aren’t planning to do something with VR or at least mention it in your conference, shame on you. Strangely, both Apple and Amazon haven’t had any VR product rumors yet. I can’t wait to see if Apple is going to introduce something cool at upcoming WWDC 2016.&lt;/p&gt;

&lt;h4 id=&quot;android-wear-20&quot;&gt;Android Wear 2.0&lt;/h4&gt;

&lt;p&gt;One feature makes Android Wear 2.0 better than WatchOS is its standalone OS. Without having any nearby Android phone, even with your phone turned off, you can send an email, respond a message and listen to music.&lt;/p&gt;

&lt;h4 id=&quot;google-home&quot;&gt;Google Home&lt;/h4&gt;

&lt;p&gt;Google Home is Google’s voice assistant; it is finally here after Siri, Cortana and Echo. If you have seen Amazon Echo, Google Home will be very familiar to you. It is a physical voice assistant that helps people’s information needs and task management. With Google’s integration of gamil, calendar, search, etc., replacing Amazon Echo is just a time matter.&lt;/p&gt;

&lt;h4 id=&quot;android-n&quot;&gt;Android N&lt;/h4&gt;

&lt;p&gt;Android N, still needs to be named, is the new Android OS. Google claims that it will improve performance, security and productivity from Marshmallow. Android N is officially supporting Vulkan, which is a relatively new graphic technology that is slowly replacing OpenGL. As same as Metal, Apple’s graphic technology introduced at WWDC 2014, both of them offer APIs that allow developers to work with graphic card directly. Simply put, Android N is going to bring better and richer gaming experience. More importantly, it is making a concrete foundation for Virtual Reality in the future.&lt;/p&gt;

&lt;h4 id=&quot;allo-and-duo&quot;&gt;Allo and Duo&lt;/h4&gt;

&lt;p&gt;Google, once again is trying to emulate social media. Both Allo and Duo are making a better messaging experience. Allo is specializing in chat, comparing Facebook Messenger, it offers lots more features. Machine Learning and AI make Allo the smartest chat app ever, image processing and search integration allow users to do things without leaving Allo. Duo, a Facetime competitor, giving a feature called Knock Knock, allow users to see a short video of callers before answering it.&lt;/p&gt;

&lt;h4 id=&quot;android-studio-20&quot;&gt;Android Studio 2.0&lt;/h4&gt;

&lt;p&gt;Google intends to build an excellent IDE to replace Eclipse, and the result is Android Studio. Android Studio 2.0 comes with sweet Instant Run features, offers a fast and feature-rich emulator, and robust and flexible build system.&lt;/p&gt;

&lt;h4 id=&quot;amp&quot;&gt;AMP&lt;/h4&gt;

&lt;p&gt;AMP is Accelerated Mobile Pages, &lt;em&gt;a open source initiative that embodies the vision that publishers can create mobile optimized content once and have it load instantly everywhere.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Google claims AMP is going to be the next generation of static page builder, one feature worthy mentioning is the “almost instant rendering”. This could mean that the pursuit of AMP has been pure and straightforward - rendering speed. As in today, mobile device is taking majority of the web traffic, rendering speed is no longer an optimization in the first place, instead, it’s a key factor directly outputs the right technology to use. And the result of it has always been that the user
experience a richer content with a incredible rendering speed.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Google I/O 2016 brought us many surprises, and it also unveiled the roadmap of Google for the next year. Machine Learning and Artificial Intelligence have been leading roles in this conference; both of them are getting more and more irreplaceable to have technology serving people in a perfect way. As I have mentioned, no matter how advanced technology is, the best technology has always been imperceptible and seemingly nonexistent.&lt;/p&gt;
</content>
<category term="Google i/o" />
<category term="Technology" />
<summary>Google I/O</summary>
</entry>
<entry>
<title>关于美队3 - 内战</title>
<link href="http://localhost:3000/about-captain-america-civil-war/" rel="alternate" type="text/html" title="关于美队3 - 内战" />
<published>2016-05-17T00:00:00-06:00</published>
<updated>2016-05-17T00:00:00-06:00</updated>
<id>http://localhost:3000/about-captain-america-civil-war</id>
<content type="html" xml:base="http://localhost:3000/about-captain-america-civil-war/">&lt;h3 id=&quot;section&quot;&gt;关于美队3&lt;/h3&gt;

&lt;p&gt;美队3 －内战毫无疑问是美队三部曲里面最好看的一部，每个人物的塑造都异常饱满，选择站边的原因也非常有说服力。很多人在争论到底哪边是正确的，这些其实都是无力的争议，电影本身已经给了很充足的理由为什么每个人会做出不同的选择，结合每个角色的过去和之前的经历，其实根本没有站边的必要。 欣赏和理解角色的同时，了解角色的性格会让电影更出彩。我本来是带着倾向于铁人一边的心情去看的，看过之后，我无法选择站在哪一边。这也是为什么电影好看的主要原因之一，让我的期待以及希望被电影内容的带入而改变。人物的选择其实就是政治选择， 无对无错，只是每个人相信的方式不一样而已。&lt;/p&gt;

&lt;p&gt;有位智者曾经说过：你不是神，无论你做什么，总会有不喜欢你的人。&lt;/p&gt;

</content>
<category term="Captain America" />
<category term="Film Review" />
<summary>关于美队3</summary>
</entry>
<entry>
<title>关于签证</title>
<link href="http://localhost:3000/about-visa/" rel="alternate" type="text/html" title="关于签证" />
<published>2016-05-06T00:00:00-06:00</published>
<updated>2016-05-06T00:00:00-06:00</updated>
<id>http://localhost:3000/about-visa</id>
<content type="html" xml:base="http://localhost:3000/about-visa/">&lt;p&gt;爆宝地段，连刷3年，至少给个灵魂奖励一下。没有关系，拿出激情接着刷，人品爆发的节奏正在靠近。借用《火星救援》里的一句台词：“I’m fucked, but I’m not giving up.”&lt;/p&gt;

</content>
<category term="visa" />
<category term="H1B" />
<summary>爆宝地段，连刷3年，至少给个灵魂奖励一下。没有关系，拿出激情接着刷，人品爆发的节奏正在靠近。借用《火星救援》里的一句台词：“I’m fucked, but I’m not giving up.”</summary>
</entry>
<entry>
<title>Two Weeks of Neovim</title>
<link href="http://localhost:3000/two-weeks-of-neovim/" rel="alternate" type="text/html" title="Two Weeks of Neovim" />
<published>2016-05-02T00:00:00-06:00</published>
<updated>2016-05-02T00:00:00-06:00</updated>
<id>http://localhost:3000/two-weeks-of-neovim</id>
<content type="html" xml:base="http://localhost:3000/two-weeks-of-neovim/">&lt;h2 id=&quot;two-weeks-down-for-neovim&quot;&gt;Two weeks down for Neovim&lt;/h2&gt;

&lt;p&gt;I wrote a post about switching to &lt;a href=&quot;http://www.cyfyifanchen.com/first-day-of-neovim/&quot; target=&quot;_blank&quot;&gt;Neovim&lt;/a&gt; a couple of weeks ago. Now, I am writing another post confirming it was a wise choice. Unlike others, I haven’t felt buggy at all in my two weeks of full time use. In return, the speed of Neovim is the best reward to me.&lt;/p&gt;

&lt;p&gt;For those who are currently struggling speed of MacVim or Gvim, I would strongly suggest you consider switching. Neovim is newer with a lot less lines of code to maintain. For developers who switched, feedbacks are all positive.&lt;/p&gt;

&lt;p&gt;Here is my &lt;a href=&quot;https://github.com/yifanchen/dotfiles/blob/master/.vimrc&quot; target=&quot;_blank&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;&lt;/a&gt;, all the Plugins and settings are compatible with Neovim. Use it as a reference if you are considering switch.&lt;/p&gt;

</content>
<category term="vim" />
<category term="Neovim" />
<category term="thoughts" />
<summary>Two weeks down for Neovim</summary>
</entry>
<entry>
<title>Let’s Talk About the Upcoming MacBook Pro</title>
<link href="http://localhost:3000/the-new-macbook-pro/" rel="alternate" type="text/html" title="Let&#39;s Talk About the Upcoming MacBook Pro" />
<published>2016-04-30T00:00:00-06:00</published>
<updated>2016-04-30T00:00:00-06:00</updated>
<id>http://localhost:3000/the-new-macbook-pro</id>
<content type="html" xml:base="http://localhost:3000/the-new-macbook-pro/">&lt;h3 id=&quot;lets-talk-about-the-upcoming-macbook-pro&quot;&gt;Let’s talk about the upcoming MacBook Pro&lt;/h3&gt;

&lt;p&gt;There are still two months left for WWDC 2016. I am getting very impatient. I wanted to see the next generation of MacBook Pro since four years ago right after its introduction at WWDC 2012. The motive was straightforward and curious - how could Apple take this machine to the next level? Now, four years have passed, the most anticipated laptop of the year is about to be unveiled within two months. As a laptop person myself who can’t survive without a laptop, I am excited to see the capability of the new MacBook Pro.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Appearance&lt;/strong&gt;: One of the Apple’s strongest area. Despite the performance, the look of Apple’s product has always been elegant. No doubt, the measurement of bezel, size and weight are all going to be smaller, bring portability to another level. The plastic hinge is going to be replaced by a metal hinge just like the &lt;a href=&quot;https://www.youtube.com/watch?v=CrBT6k7RMao&quot; target=&quot;_blank&quot;&gt;MacBook&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Display&lt;/strong&gt;: With retina display on every device(not MBA), there is a possibility Apple might go 4K on MacBook Pro’s display to differentiate it from the rest of MacBook product line.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Battery&lt;/strong&gt;: The new battery technology should be adopted on MacBook Pro as well. Apple introduced a new battery technology when &lt;a href=&quot;https://www.youtube.com/watch?v=CrBT6k7RMao&quot; target=&quot;_blank&quot;&gt;MacBook&lt;/a&gt; was announced last year. Engineers restructure components of the entire battery to reshape it to fit inside a compact design. The result of this is a battery that is flexible enough to fit in a thin hardware as well as maintaining it’s capacity.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ports&lt;/strong&gt;: It’s the future of laptop. USB Type-C is the future of connection. Seriously, people need to stop complaining the lack of ports. Technology is moving forward, we can’t always stick with a laptop that has freaking 5 USB ports.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keyboard&lt;/strong&gt;: Lots people don’t like the new butterfly mechanism keyboard, I might be in the same boat. I own a blue switch mechanical keyboard, imagine how hard for me to like a keyboard that has almost zero travel. Hopefully, it doesn’t take long for me to get used to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trackpad&lt;/strong&gt;: Apple’s laptop trackpad has always been pure awesomeness. I have met tons developers prefer external trackpads rather than a mice. With trackpad, my worflow doesn’t need a mouse at all. The force touch technology of trackpad takes the interaction to a whole new level. As time goes, more and more applications will take advantages of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Historically, Apple hasn’t been generous to memory at all, which is something developers complain quite often. With memory intense applications like Chrome or Virtual Machine. 32GB is a must have for professionals. I don’t buy Apple’s excuses when they say they care UX more than anything. That’s BS on MacBook Pros because they made for professionals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gaming and Graphics&lt;/strong&gt;: Yes, you can always buy a cheaper Windows machine that runs games better. The truth is that both developers and game makers think Mac Gaming is a joke. With very limited market needs, lack of developers, insufficient recourses made Mac Gaming how it is today. But like it or not, it might not be a joke for long. Apple announced its graphic technology, Metal, at WWDC 2014. Developers have widely adopted it on iOS. The result is fantastic. At the same time, Apple planned to implement Metal to OSX as well. I can’t say that Mac Gaming will become a phenomenon and potentially replace PC Gaming one day. But, in this tech world, anything is a possibility.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Our version for personal computing has always been that the most powerful technology should deliver incredible capability without the complexity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The boundary of software and hardware is zero to Apple. It is also what driving Apple to make technology incredibly powerful and yet intuitively reachable. With its ecosystem, stunning industrial design, and unlimited innovation, I can’t wait to see the new Macbook Pro.&lt;/p&gt;
</content>
<category term="apple" />
<category term="macbook pro" />
<category term="technology" />
<summary>Let’s talk about the upcoming MacBook Pro</summary>
</entry>
<entry>
<title>Code Refactoring</title>
<link href="http://localhost:3000/code-refactoring/" rel="alternate" type="text/html" title="Code Refactoring" />
<published>2016-04-21T00:00:00-06:00</published>
<updated>2016-04-21T00:00:00-06:00</updated>
<id>http://localhost:3000/code-refactoring</id>
<content type="html" xml:base="http://localhost:3000/code-refactoring/">&lt;h2 id=&quot;learn-from-code-refactoring&quot;&gt;Learn From Code Refactoring&lt;/h2&gt;

&lt;p&gt;I spent a few hours refactoring the code on a simple page the other day. It then occured to me, a new way of learning. As I was going through each line of the code, I started thinking, can this line of code be written in a better way? To be able to do this, I needed to define the better way first. In general, there is no correct answer of writing code in a better or correct way. It comes down to the team effort.&lt;/p&gt;

&lt;p&gt;First of all, following the best practices and code consistency of the team. Second, think and google a lot. Third, read through the documentation again(I found this to be extremely helpful). In reality, as developers, we aren’t granted enough time to think before we write. Code refactoring is an amazing chance to pick up that thought.&lt;/p&gt;

&lt;p&gt;Treating code refactoring as a new way to learn, a new way to discover. A way of getting out of your comfort zone and trying to code from different aspects. This is a great way to get better, more importantly, you will also enjoy code refactoring.&lt;/p&gt;
</content>
<category term="code" />
<category term="thoughts" />
<summary>Learn From Code Refactoring</summary>
</entry>
<entry>
<title>First Day of Neovim</title>
<link href="http://localhost:3000/first-day-of-neovim/" rel="alternate" type="text/html" title="First Day of Neovim" />
<published>2016-04-14T00:00:00-06:00</published>
<updated>2016-04-14T00:00:00-06:00</updated>
<id>http://localhost:3000/first-day-of-neovim</id>
<content type="html" xml:base="http://localhost:3000/first-day-of-neovim/">&lt;h2 id=&quot;first-day-of-using-neovim&quot;&gt;First day of using Neovim&lt;/h2&gt;

&lt;p&gt;As my &lt;a href=&quot;https://github.com/yifanchen/dotfiles/blob/master/.vimrc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;&lt;/a&gt; gets complicated, Vim can get slow often(mainly because some poorly written plugins), I had to take off some great features to maintain its sweet speed. I started using code style checkers and linters recently, I found out Vim gets even slower when opening big &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; files with code style checkers on. That’s probably the biggest problem the current version of Vim has, it doesn’t work asynchronously. In another word, Vim freezes when the former action is being
executed. However, the next version of Vim, 8.0, has asynchronous processing according to it’s pre-release &lt;a href=&quot;https://github.com/vim/vim/blob/master/runtime/doc/version8.txt&quot;&gt;doc&lt;/a&gt;. This is the best thing that can happen to Vim, but I am getting very impatient. I decided to try Neovim out.&lt;/p&gt;

&lt;p&gt;Neovim is very new, in fact the very first beta version is still not released. But, I’ve heard good things from other Vimmers, especially how fast it is comparing with Vim. Vim’s speed doesn’t bother me much before, but it has started lately as my plugin collection gets heavy. Neovim has the asynchronous process, not much plugins have the capabilities can take advantages of it. I believe in the future more and more plugins will be built that way.&lt;/p&gt;

&lt;p&gt;After few hours configing and googling. Amazingly, all the plugins, themes, colors, settings work already in Neovim. Configing Vim isn’t fun, surprisingly Neovim has it’s game down to make the &lt;a href=&quot;https://neovim.io/doc/user/nvim_from_vim.html&quot;&gt;transition&lt;/a&gt; quite friendly to Vimmers. There are couple things I found quite awesome that comes in with Neovim already, built-in Terminal and better mouse integration. I use Tmux for my session management, so the built-in Terminal won’t be usefull much to me for now. But, I like the idea of having it, maybe in the future, I don’t have to use Tmux anymore. The mouse integration is solid, it doesn’t feel buggy at all. I am a huge believer of mouse-free wrokflow, so I might disable mouse in Neovim at some point. However, it’s good to know that Neovim comes with better mouse integration. In order to get full benefits from Neovim, the following plugins I will need to install or switch.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vim-Plug
fzf
fzf-vim
Neocomplete
Neosnippet
Neomake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These plugins all support async processing. Can’t wait to ry the result.&lt;/p&gt;

&lt;p&gt;Well, I am very happy with it. Last step:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias vi=&quot;nvim&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
<category term="vim" />
<category term="neovim" />
<summary>First day of using Neovim</summary>
</entry>
<entry>
<title>Getting linters working in Atom and Vim</title>
<link href="http://localhost:3000/getting-linters-working-in-atom-and-vim/" rel="alternate" type="text/html" title="Getting linters working in Atom and Vim" />
<published>2016-04-08T00:00:00-06:00</published>
<updated>2016-04-08T00:00:00-06:00</updated>
<id>http://localhost:3000/getting-linters-working-in-atom-and-vim</id>
<content type="html" xml:base="http://localhost:3000/getting-linters-working-in-atom-and-vim/">&lt;h2 id=&quot;getting-linters-working-in-atom-and-vim&quot;&gt;Getting linters working in Atom and Vim&lt;/h2&gt;

&lt;p&gt;I like &lt;a href=&quot;{{ site.url }}/The-Value-of-Code-Consistency-is-Underesimated/&quot; target=&quot;_blank&quot;&gt;code consistency&lt;/a&gt;, and think the value of it matters a lot to a team in a long run. It’s not easy to achieve code consistency in the middle of an ongoing project. What’s even harder is that finding a doable approach of getting same code style of everyone in the team. To complete this for the team, there will be fine training and strict rules needed. However, lack of proper training and code style management are obviously everywhere today. There is a fine line between killing the creativity of developers and boosting the productivity of teams. Software development is not about one single kick ass developer, it’s about teamwork and team effort. I decided to give a try.&lt;/p&gt;

&lt;p&gt;If I happen to have an idea that hopefully my team will adopt, I have to make sure first the value of the idea is beneficial to the team in every aspect. Second prototype happens before implementation. Then the rest of the team only needs to spend a minimal effort to carry on. To do so, I need to find out how to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finding the correct litners&lt;/li&gt;
  &lt;li&gt;Making sure the linters work in both Atom and Vim, possibly all common text editors.&lt;/li&gt;
  &lt;li&gt;Convince the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;part-1---finding-the-correct-linters&quot;&gt;Part 1 - Finding the correct linters&lt;/h4&gt;

&lt;p&gt;Of course, the easiest part comes in first. Finding suitable litners isn’t hard. &lt;a href=&quot;http://fortune.com/2015/12/09/airbnb-glassdoor/&quot; target=&quot;_blank&quot;&gt;Airbnb&lt;/a&gt; is rated the best tech company to work for in 2016. I happen to know Airbnb because of their linters, not the service I used. Airbnb has several linters, the most famous and beloved linter is their &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot;&gt;JSCS linter&lt;/a&gt;.
It is open-sourced, and very popular among developers. I dug in a little and read through the documentations, made sure it was what I was looking for and simple enough for my team to use.&lt;/p&gt;

&lt;h4 id=&quot;part-2---making-sure-the-linters-work-in-common-editors&quot;&gt;Part 2 - Making sure the linters work in common editors&lt;/h4&gt;

&lt;p&gt;I browsed &lt;a href=&quot;http://jscs.info/&quot; target=&quot;_blank&quot;&gt;JSCS&lt;/a&gt; for the info I needed. Bam, I found everything &lt;a href=&quot;http://jscs.info/overview&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. I opened Atom and installed the
&lt;a href=&quot;https://atom.io/packages/linter-jscs&quot; target=&quot;_blank&quot;&gt;JSCS Linter&lt;/a&gt; inside Atom, changed the preset to Airbnb. Tested it with couple &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; files, it worked beautifully. Then let’s get it working in Vim. Although I am a Vimmer, but I know it will take much longer to make it working in Vim than in Atom. First, I needed to &lt;code class=&quot;highlighter-rouge&quot;&gt;npm insteall jscs -g&lt;/code&gt; to my &lt;code class=&quot;highlighter-rouge&quot;&gt;home&lt;/code&gt; directory. Then I created &lt;code class=&quot;highlighter-rouge&quot;&gt;.jscsrc&lt;/code&gt; file and put the preset like the following code in my &lt;code class=&quot;highlighter-rouge&quot;&gt;home&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;preset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, the rest is to config Syntastic to call the correct litner.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_javascript_checkers = [&#39;jscs&#39;]
let g:syntastic_html_tidy_exec = &#39;tidy5&#39;
let jshint2_read = 1
let jshint2_save = 1
let g:syntastic_check_on_open = 1

&quot;dispaly all errors for mutiple checkers
let g:syntastic_aggregate_errors = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Good, everything worked. Although Syntastic with new linter slows down Vim loading speed a bit, I am still pretty happy with the result of it. The next step is getting CSS and React linters working, and put them in our build system, which I will write later.&lt;/p&gt;

&lt;h4 id=&quot;part-3---convince-the-team&quot;&gt;Part 3 - Convince the team&lt;/h4&gt;

&lt;p&gt;Luckily, everyone in my team is a team player. It doesn’t take much to explain the value of it. It’s especially easier since I have figured out everything first, all they need to do is execution.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;This is a post showing how I took an idea and applied it to my team. In reality, it might be harder to adopt an impractical idea or your team is too big to change. However, a little by little everyone can improve their teams, everyone can be a true team player.&lt;/p&gt;

</content>
<category term="vim" />
<category term="atom" />
<category term="linters" />
<summary>Getting linters working in Atom and Vim</summary>
</entry>
</feed>
