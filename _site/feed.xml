<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<generator uri="http://jekyllrb.com" version="3.0.3">Jekyll</generator>
<link href="http://localhost:3000/feed.xml" rel="self" type="application/atom+xml" />
<link href="http://localhost:3000/" rel="alternate" type="text/html" />
<updated>2016-05-02T23:09:58-06:00</updated>
<id>http://localhost:3000/</id>
<title>Yifan Chen</title>
<entry>
<title>Let’s Talk About the Upcoming MacBook Pro</title>
<link href="http://localhost:3000/the-new-macbook-pro/" rel="alternate" type="text/html" title="Let&#39;s Talk About the Upcoming MacBook Pro" />
<published>2016-04-30T00:00:00-06:00</published>
<updated>2016-04-30T00:00:00-06:00</updated>
<id>http://localhost:3000/the-new-macbook-pro</id>
<content type="html" xml:base="http://localhost:3000/the-new-macbook-pro/">&lt;h3 id=&quot;lets-talk-about-the-upcoming-macboo-pro&quot;&gt;Let’s talk about the upcoming MacBoo Pro&lt;/h3&gt;

&lt;p&gt;Still 2 months left for WWDC 2016. I am getting very impatient. I wanted to see the next generation of Macbook Pro about 4 years ago right after its announcement at WWDC 2012. The motive was simple and curious - how could Apple take this machine to the next level? Now, 4 years have passed, the most anticipated laptop of year is about to be unveiled within 2 months. As a computer person myself, I am excited to see every detailed spec of it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Appearance&lt;/strong&gt;: One of the Apple’s strongest area. Despite the performance, the look of Apple’s product has always been elegant. No doubt, bezel, size and weight are all getting smaller. The plastic hinge is going to be replaced by a metal hinge like the MacBook.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Display&lt;/strong&gt;: With retina display on every device, there is a possibility Apple might go 4K on Macbook Pro’s display.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ports&lt;/strong&gt;: It’s the future of laptop. USB Type-C is the future of connection. Seriously, people needs to stop complaining the lack of ports. Technology is moving forward, we can’t always stick with a laptop that has freaking 5 USB ports.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keyboard&lt;/strong&gt;: Lots people don’t like the new butterfly mechanism keyboard, I might be in the same boat. I own a blue switch mechanical keyboard, imagine how hard for me to like a keyboard that has almost zero travel. Hopefully, it doesn’t take long for me to get used to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Trackpad&lt;/strong&gt;: I have to say, Apple’s trackpad is pure awesomeness. Altho today, there is still no Windows laptop has a trackpad that can even compare to Apple’s trackpad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Historically, Apple hasn’t been generous to memory at all, which is something developers complain quite often. With memory intense applications like Chrome or Virtual Machine. 32GB is a must option for professional. I don’t buy Apple’s excuses when they say they care UX more than anything. That’s kinda BS on MPB because MBPs are made for professionals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Gaming and Graphics&lt;/strong&gt;: Yes, you can always buy a cheaper Windows machine that runs games better. The truth is that both developers and game makers think Mac Gaming is a joke. With very limited market need, lack of developers, insufficient recourse made Mac Gaming how it is today. But like it or not, it might not be a joke for long. Apple announced its own graphic technology, Metal, at WWDC 2014. It has been widely adopted by developers on iOS. The result is amazing. Same time, Apple planned to implement Metal to OSX as well. I can’t say that Mac Gaming will become a thing and potentially replace PC Gaming. But, in a tech world, anything is a possibility.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Our version for personal computing has always been that the most powerful technology should deliver incredible capability without the complexity.&lt;/em&gt; The boundary of software and hardware is zero to Apple, it is also what driving Apple to make technology powerful and yet reachable. With its ecosystem, stunning industrial design, and unlimited innovation, I can’t wait to see the new MacBook Pro.&lt;/p&gt;
</content>
<category term="apple" />
<category term="macbook pro" />
<category term="technology" />
<summary>Let’s talk about the upcoming MacBoo Pro</summary>
</entry>
<entry>
<title>Code Refactoring</title>
<link href="http://localhost:3000/code-refactoring/" rel="alternate" type="text/html" title="Code Refactoring" />
<published>2016-04-21T00:00:00-06:00</published>
<updated>2016-04-21T00:00:00-06:00</updated>
<id>http://localhost:3000/code-refactoring</id>
<content type="html" xml:base="http://localhost:3000/code-refactoring/">&lt;h2 id=&quot;learn-from-code-refactoring&quot;&gt;Learn From Code Refactoring&lt;/h2&gt;

&lt;p&gt;I spent a few hours refactoring the code on a simple page the other day. It then occured to me, a new way of learning. As I was going through each line of the code, I started thinking, can this line of code be written in a better way? To be able to do this, I needed to define the better way first. In general, there is no correct answer of writing code in a better or correct way. It comes down to the team effort.&lt;/p&gt;

&lt;p&gt;First of all, following the best practices and code consistency of the team. Second, think and google a lot. Third, read through the documentation again(I found this to be extremely helpful). In reality, as developers, we aren’t granted enough time to think before we write. Code refactoring is an amazing chance to pick up that thought.&lt;/p&gt;

&lt;p&gt;Treating code refactoring as a new way to learn, a new way to discover. A way of getting out of your comfort zone and trying to code from different aspects. This is a great way to get better, more importantly, you will also enjoy code refactoring.&lt;/p&gt;
</content>
<category term="code" />
<category term="thoughts" />
<summary>Learn From Code Refactoring</summary>
</entry>
<entry>
<title>First Day of Neovim</title>
<link href="http://localhost:3000/first-day-of-neovim/" rel="alternate" type="text/html" title="First Day of Neovim" />
<published>2016-04-14T00:00:00-06:00</published>
<updated>2016-04-14T00:00:00-06:00</updated>
<id>http://localhost:3000/first-day-of-neovim</id>
<content type="html" xml:base="http://localhost:3000/first-day-of-neovim/">&lt;h2 id=&quot;first-day-of-using-neovim&quot;&gt;First day of using Neovim&lt;/h2&gt;

&lt;p&gt;As my &lt;a href=&quot;https://github.com/yifanchen/dotfiles/blob/master/.vimrc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;&lt;/a&gt; gets complicated, Vim can get slow often(mainly because some poorly written plugins), I had to take off some great features to maintain its sweet speed. I started using code style checkers and linters recently, I found out Vim gets even slower when opening big &lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; files with code style checkers on. That’s probably the biggest problem the current version of Vim has, it doesn’t work asynchronously. In another word, Vim freezes when the former action is being
executed. However, the next version of Vim, 8.0, has asynchronous processing according to it’s pre-release &lt;a href=&quot;https://github.com/vim/vim/blob/master/runtime/doc/version8.txt&quot;&gt;doc&lt;/a&gt;. This is the best thing that can happen to Vim, but I am getting very impatient. I decided to try Neovim out.&lt;/p&gt;

&lt;p&gt;Neovim is very new, in fact the very first beta version is still not released. But, I’ve heard good things from other Vimmers, especially how fast it is comparing with Vim. Vim’s speed doesn’t bother me much before, but it has started lately as my plugin collection gets heavy. Neovim has the asynchronous process, not much plugins have the capabilities can take advantages of it. I believe in the future more and more plugins will be built that way.&lt;/p&gt;

&lt;p&gt;After few hours configing and googling. Amazingly, all the plugins, themes, colors, settings work already in Neovim. Configing Vim isn’t fun, surprisingly Neovim has it’s game down to make the &lt;a href=&quot;https://neovim.io/doc/user/nvim_from_vim.html&quot;&gt;transition&lt;/a&gt; quite friendly to Vimmers. There are couple things I found quite awesome that comes in with Neovim already, built-in Terminal and better mouse integration. I use Tmux for my session management, so the built-in Terminal won’t be usefull much to me for now. But, I like the idea of having it, maybe in the future, I don’t have to use Tmux anymore. The mouse integration is solid, it doesn’t feel buggy at all. I am a huge believer of mouse-free wrokflow, so I might disable mouse in Neovim at some point. However, it’s good to know that Neovim comes with better mouse integration. In order to get full benefits from Neovim, the following plugins I will need to install or switch.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Vim-Plug
fzf
fzf-vim
Neocomplete
Neosnippet
Neomake
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These plugins all support async processing. Can’t wait to ry the result.&lt;/p&gt;

&lt;p&gt;Well, I very happy with it. Last step:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias vi=&quot;nvim&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</content>
<category term="vim" />
<category term="neovim" />
<summary>First day of using Neovim</summary>
</entry>
<entry>
<title>Getting linters working in Atom and Vim</title>
<link href="http://localhost:3000/getting-linters-working-in-atom-and-vim/" rel="alternate" type="text/html" title="Getting linters working in Atom and Vim" />
<published>2016-04-08T00:00:00-06:00</published>
<updated>2016-04-08T00:00:00-06:00</updated>
<id>http://localhost:3000/getting-linters-working-in-atom-and-vim</id>
<content type="html" xml:base="http://localhost:3000/getting-linters-working-in-atom-and-vim/">&lt;h2 id=&quot;getting-linters-working-in-atom-and-vim&quot;&gt;Getting linters working in Atom and Vim&lt;/h2&gt;

&lt;p&gt;I like &lt;a href=&quot;{{ site.url }}/The-Value-of-Code-Consistency-is-Underesimated/&quot; target=&quot;_blank&quot;&gt;code consistency&lt;/a&gt;, and think the value of it matters a lot to a team in a long run. It’s not easy to achieve code consistency in the middle of an ongoing project. What’s even harder is that finding a doable approach of getting same code style of everyone in the team. To complete this for the team, there will be fine training and strict rules needed. However, lack of proper training and code style management are obviously everywhere today. There is a fine line between killing the creativity of developers and boosting the productivity of teams. Software development is not about one single kick ass developer, it’s about teamwork and team effort. I decided to give a try.&lt;/p&gt;

&lt;p&gt;If I happen to have an idea that hopefully my team will adopt, I have to make sure first the value of the idea is beneficial to the team in every aspect. Second prototype happens before implementation. Then the rest of the team only needs to spend a minimal effort to carry on. To do so, I need to find out how to do the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Finding the correct litners&lt;/li&gt;
  &lt;li&gt;Making sure the linters work in both Atom and Vim, possibly all common text editors.&lt;/li&gt;
  &lt;li&gt;Convince the team&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;part-1---finding-the-correct-linters&quot;&gt;Part 1 - Finding the correct linters&lt;/h4&gt;

&lt;p&gt;Of course, the easiest part comes in first. Finding suitable litners isn’t hard. &lt;a href=&quot;http://fortune.com/2015/12/09/airbnb-glassdoor/&quot; target=&quot;_blank&quot;&gt;Airbnb&lt;/a&gt; is rated the best tech company to work for in 2016. I happen to know Airbnb because of their linters, not the service I used. Airbnb has several linters, the most famous and beloved linter is their &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot;&gt;JSCS linter&lt;/a&gt;.
It is open-sourced, and very popular among developers. I dug in a little and read through the documentations, made sure it was what I was looking for and simple enough for my team to use.&lt;/p&gt;

&lt;h4 id=&quot;part-2---making-sure-the-linters-work-in-common-editors&quot;&gt;Part 2 - Making sure the linters work in common editors&lt;/h4&gt;

&lt;p&gt;I browsed &lt;a href=&quot;http://jscs.info/&quot; target=&quot;_blank&quot;&gt;JSCS&lt;/a&gt; for the info I needed. Bam, I found everything &lt;a href=&quot;http://jscs.info/overview&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. I opened Atom and installed the
&lt;a href=&quot;https://atom.io/packages/linter-jscs&quot; target=&quot;_blank&quot;&gt;JSCS Linter&lt;/a&gt; inside Atom, changed the preset to Airbnb. Tested it with couple &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; files, it worked beautifully. Then let’s get it working in Vim. Although I am a Vimmer, but I know it will take much longer to make it working in Vim than in Atom. First, I needed to &lt;code class=&quot;highlighter-rouge&quot;&gt;npm insteall jscs -g&lt;/code&gt; to my &lt;code class=&quot;highlighter-rouge&quot;&gt;home&lt;/code&gt; directory. Then I created &lt;code class=&quot;highlighter-rouge&quot;&gt;.jscsrc&lt;/code&gt; file and put the preset like the following code in my &lt;code class=&quot;highlighter-rouge&quot;&gt;home&lt;/code&gt; directory.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;preset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;airbnb&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, the rest is to config Syntastic to call the correct litner.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_javascript_checkers = [&#39;jscs&#39;]
let g:syntastic_html_tidy_exec = &#39;tidy5&#39;
let jshint2_read = 1
let jshint2_save = 1
let g:syntastic_check_on_open = 1

&quot;dispaly all errors for mutiple checkers
let g:syntastic_aggregate_errors = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Good, everything worked. Although Syntastic with new linter slows down Vim loading speed a bit, I am still pretty happy with the result of it. The next step is getting CSS and React linters working, and put them in our build system, which I will write later.&lt;/p&gt;

&lt;h4 id=&quot;part-3---convince-the-team&quot;&gt;Part 3 - Convince the team&lt;/h4&gt;

&lt;p&gt;Luckily, everyone in my team is a team player. It doesn’t take much to explain the value of it. It’s especially easier since I have figured out everything first, all they need to do is execution.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;This is a post showing how I took an idea and applied it to my team. In reality, it might be harder to adopt an impractical idea or your team is too big to change. However, a little by little everyone can improve their teams, everyone can be a true team player.&lt;/p&gt;

</content>
<category term="vim" />
<category term="atom" />
<category term="linters" />
<summary>Getting linters working in Atom and Vim</summary>
</entry>
<entry>
<title>Using AMP to Build a Blog</title>
<link href="http://localhost:3000/Using-AMP-Building-Blog/" rel="alternate" type="text/html" title="Using AMP to Build a Blog" />
<published>2016-04-05T00:00:00-06:00</published>
<updated>2016-04-05T00:00:00-06:00</updated>
<id>http://localhost:3000/Using-AMP-Building-Blog</id>
<content type="html" xml:base="http://localhost:3000/Using-AMP-Building-Blog/">&lt;h2 id=&quot;using-amp-to-build-a-blog&quot;&gt;Using AMP to build a blog&lt;/h2&gt;

&lt;p&gt;AMP is Accelerated Mobile Pages, &lt;em&gt;a open source initiative that embodies the vision that publishers can create mobile optimized content once and have it load instantly everywhere.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I read this today, thinking about taking my blog from Jekyll to AMP. Doing this is not because the improved milliseconds loading speed on my site. It’s all about the spirit of craftsman. Software engineering is like craftsmanship, there isn’t the best way, but always the better way. The intention with perfection makes software better and better.&lt;/p&gt;

</content>
<category term="thoughts" />
<category term="team" />
<category term="design" />
<summary>Using AMP to build a blog</summary>
</entry>
<entry>
<title>The Value of Code Consistency is Underestimated</title>
<link href="http://localhost:3000/The-Value-of-Code-Consistency-is-Underesimated/" rel="alternate" type="text/html" title="The Value of Code Consistency is Underestimated" />
<published>2016-04-03T00:00:00-06:00</published>
<updated>2016-04-03T00:00:00-06:00</updated>
<id>http://localhost:3000/The-Value-of-Code-Consistency-is-Underesimated</id>
<content type="html" xml:base="http://localhost:3000/The-Value-of-Code-Consistency-is-Underesimated/">&lt;h3 id=&quot;the-value-of-code-consistency-is-underestimated&quot;&gt;The value of code consistency is underestimated&lt;/h3&gt;

&lt;p&gt;I worked on a friend’s design not too long ago. His design drove me crazy because the lack of consistency. The margins, paddings, font sizes, and colors were all different in different pages. I ended up eyeballed everything because I wasn’t sure which page to follow. Keep things consistent seems easy and doable to designers. In reality, only very experienced designers come along with consistent designs. A good design isn’t something how it looks, it’s how it works on many different levels.&lt;/p&gt;

&lt;p&gt;A good design starts with a thoughtful process, a careful planning and an intention to details. At last, it’s how it looks. That is why a good design takes time, and it should take time. In the world we are in now, it’s nearly impossible to have designers to think thoroughly before they start working on it.&lt;/p&gt;

&lt;p&gt;As same in design, code consistency is hard to keep as well especially when developers come and go. Writing maintainable code with code consistency really matters to the team in a long run. The value of code consistency is way underestimated today. QA developers spend a lot of time to verify bugs on the outside, code consistency is certainly a way can reduce amounts of possible bugs on the inside. It is also far more efficient and effective than code refactor, which can be considered as one of the passive ways to match code consistency. Developers come from various backgrounds, having different developers following one rule is nearly impossible by telling them what to do or ask them to read the damn documentations. It may end up making they think you micro-manage them, bringing negative atmosphere to the team.&lt;/p&gt;

&lt;p&gt;So, what’s the correct and the best way of building a team with a healthy and creative vibe that also is very friendly to developers? First of all, proper training. Yes, we are talking about serious and thorough training that are tailored to developers, not a short time, not a few links to long and boring documentation. In fact, decent sized companies should have dedicated developers work on the training programs. Second, linters and build systems. Yes, I know developers don’t like linters, but think broader, in a long run, team benefits from it. Third, proper education of team cultures. It will never work by just asking developers to do things. Explain pros and cons to them. They will understand when it comes down to the team effort because today everyone claims they are team players.&lt;/p&gt;
</content>
<category term="thoughts" />
<category term="team" />
<category term="design" />
<summary>The value of code consistency is underestimated</summary>
</entry>
<entry>
<title>他们总是更新我做过的东西</title>
<link href="http://localhost:3000/why-no-projects/" rel="alternate" type="text/html" title="他们总是更新我做过的东西" />
<published>2016-03-31T12:39:00-06:00</published>
<updated>2016-03-31T12:39:00-06:00</updated>
<id>http://localhost:3000/why-no-projects</id>
<content type="html" xml:base="http://localhost:3000/why-no-projects/">&lt;p&gt;叹气，好坏几年程序员了，至少给我个机会拿点东西出来潇洒一下。那帮混蛋总是更新我做过的东西。又不好意思拿别人改过的东西出来风骚。看来这下得自己花时间搞点小东西出来炫耀炫耀，至少能满足一下这爱耍宝的自尊心了。&lt;/p&gt;
</content>
<category term="Projects" />
<category term="Why-No-Projects" />
<summary>叹气，好坏几年程序员了，至少给我个机会拿点东西出来潇洒一下。那帮混蛋总是更新我做过的东西。又不好意思拿别人改过的东西出来风骚。看来这下得自己花时间搞点小东西出来炫耀炫耀，至少能满足一下这爱耍宝的自尊心了。</summary>
</entry>
<entry>
<title>Swap screenshot shortcuts</title>
<link href="http://localhost:3000/swap-screenshot-shortcut/" rel="alternate" type="text/html" title="Swap screenshot shortcuts" />
<published>2016-03-30T00:00:00-06:00</published>
<updated>2016-03-30T00:00:00-06:00</updated>
<id>http://localhost:3000/swap-screenshot-shortcut</id>
<content type="html" xml:base="http://localhost:3000/swap-screenshot-shortcut/">&lt;h2 id=&quot;swap-screenshot-shortcuts&quot;&gt;Swap screenshot shortcuts&lt;/h2&gt;

&lt;p&gt;We all enjoy using OSX’s built-in &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; to screenshot. However, it’s quite inconvenient to drag and drop the screenshot from desktop every time. Most people don’t know that &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;control&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; is screenshot directly to the clipboard, the next step is just &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; to any application you like. I found this extremely useful especially when I want to send a screenshot.&lt;/p&gt;

&lt;p&gt;Using only left hand to reach 4 keys one time is hard. So I swapped both as in the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;{{ site.url  }}/assets/images/screenshot-swap.jpg&quot; alt=&quot;swapping screenshot shortcuts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, sending a screenshot is easy than ever. &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; &amp;gt; switch to your chat client &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;. Done.&lt;/p&gt;
</content>
<category term="Apple" />
<category term="Shortcuts" />
<category term="Tips" />
<summary>Swap screenshot shortcuts</summary>
</entry>
<entry>
<title>Why I use Vim</title>
<link href="http://localhost:3000/why-I-use-vim/" rel="alternate" type="text/html" title="Why I use Vim" />
<published>2016-03-28T00:00:00-06:00</published>
<updated>2016-03-28T00:00:00-06:00</updated>
<id>http://localhost:3000/why-I-use-vim</id>
<content type="html" xml:base="http://localhost:3000/why-I-use-vim/">&lt;h2 id=&quot;why-i-use-vim&quot;&gt;Why I use Vim&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We spend so much of our time trying to fit in. One day, it will occur to us life is much more rewarding when choosing the road not taken, a life not patterned after someone else’s, an editor, very few will ever use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I like Vim, Tmux and Zsh. It rewards me a lot when I know this is an IDE that only suits me. With motivation like this, I spend a lot of time to config, maintain and perfect my dotfiles. At same time, I found knowing Vim makes coding absolutely productive and amazingly enjoyable. The idea of using Vim with model editing is being &lt;em&gt;lazy&lt;/em&gt;, building a mouse-free work-flow, keeping possibilities under fingertips. I don’t buy the shit when people say that they don’t need it because coding is 90% thinking and 10% writing. I spend 90% of my time fix code rather than writing code. When I want to reach the specific part of a file, I want it to happen as quick as possible. To me, Vim is a state of the art, quickly navigating through lines of code, creatively combining shortcuts, endlessly learning mind blowing tricks, all of these make Vim irresistible.&lt;/p&gt;

&lt;p&gt;Vim has massive shortcuts, there is always a better way of doing the same thing with fewer keystrokes. The intention is clear: keep learning, don’t be contented, find the fastest and most convenient way to make a change. Additionally, Vim brings me creative thinking. I wanted to apply the idea of using &lt;code class=&quot;highlighter-rouge&quot;&gt;hjkl&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;arrow&lt;/code&gt; keys in any applications, I found an approach and practised it. It worked out much better than I expected. Soon, I got addicted. So, I wrote both &lt;a href=&quot;{{ site.url }}/osx-shortcuts-you-may-not-know/&quot;&gt;OSX-shortcuts-you-may-not-know&lt;/a&gt; and &lt;a href=&quot;{{ site.url }}/advanced-keymapping/&quot;&gt;advanced-keymapping&lt;/a&gt;, hopefully spreading a little to have others adopt the concept.&lt;/p&gt;

&lt;p&gt;After all, Vim may not necessarily make me a good developer, but definitely makes me a motivated developer.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yifanchen/dotfiles&quot;&gt;my dotfiles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;{{ site.url }}/assets/images/vim.jpg&quot; alt=&quot;my Vim&quot; /&gt;&lt;/p&gt;

</content>
<category term="Vim" />
<category term="tmux" />
<category term="zsh" />
<summary>Why I use Vim</summary>
</entry>
<entry>
<title>陆续总结一下github上好的前端教程</title>
<link href="http://localhost:3000/github-chinese/" rel="alternate" type="text/html" title="陆续总结一下github上好的前端教程" />
<published>2016-03-27T22:44:00-06:00</published>
<updated>2016-03-27T22:44:00-06:00</updated>
<id>http://localhost:3000/github-chinese</id>
<content type="html" xml:base="http://localhost:3000/github-chinese/">&lt;h2 id=&quot;github&quot;&gt;陆续总结一下github上好的前端教程&lt;/h2&gt;

&lt;p&gt;自己是做前端的，就是front end。一直觉得前端相对来说比较容易学。随着各种框架的出现和语言一点一点的完善，如果用心的话，
半年可以达到一个很不错的水平。在美国找到一个5万－6万的工作，也绝对不难。我们公司有300+的程序员，前端大概占了5/1，
而其中不少都是从code camp过来的，也就是说经验少于半年。所以，如果你目前没有工作，或者不喜欢自己的工作，而且又对电脑比较
感兴趣的话，前端是个非常棒的选择。&lt;/p&gt;

&lt;p&gt;每天都会去github逛逛，找找新鲜的东西看。无意间发现上面有很多非常棒的中文教程，书籍。这绝对是一个很好的现象。今后的几天我会陆续贴
一些好的中文教程，对那些想学前端的的朋友来说，能少走点弯路就少走点。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/AutumnsWind/Front-end-tutorial&quot; target=&quot;_blank&quot;&gt;front end totuorial&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这绝对是个神贴，里面归结了非常多，非常棒的学习材料。有必须要读的，也有在闲暇时间没事看两眼的。总之，你如果想学习front end，这个必须有。
强烈建议把所有东西都过一遍，惭愧啊，我很多东西都还没读。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jsfront/src&quot; target=&quot;_blank&quot;&gt;jsfront&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;jsfront有自己的网络群，当然上面也有很多javascript常用函数和常见模式。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jsfront/front-end-collect&quot; target=&quot;_blank&quot;&gt;front end collect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;front end collect和front end toturial很像，但是内容方面来讲，后者更强。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sunyuhui/JavaScript-Tips&quot; target=&quot;_blank&quot;&gt;javascript tips&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;javasctip tips是个很棒的想法，每天更新个小tip，每天一步，慢慢学习，但是目前maintainer好像不再maintain了。希望有一天能被人重新拾起。&lt;/p&gt;

</content>
<category term="github" />
<category term="中文" />
<category term="教程" />
<summary>陆续总结一下github上好的前端教程</summary>
</entry>
</feed>
